# use files parameter to use multiple docker-compose.yml files
- name: Docker Compose All Containers
  hosts: 
    - testides3.indicomain.local
  tasks:
#All containers 
  - name: Download ":latest" All
    win_shell: |
      docker pull indicobuilds/portal-internal-dev:latest 
      docker pull indicobuilds/portal-external-dev:latest

      docker pull indicobuilds/helper-services-dev:latest

      docker pull indicobuilds/conversion-services-dev:latest
      docker pull indicobuilds/burning-service-dev:latest
      docker pull indicobuilds/publishing-service-dev:latest
      docker pull indicobuilds/integrator-service-dev:latest
      docker pull indicobuilds/media-service-dev:latest

      docker pull indicobuilds/raas-dev:latest

#Stop Container   
  - name: Stop current containers
    #win_shell: docker container stop portal-internal portal-external helper-services conversion-services burning-service publishing-service integrator-service media-service
    #ignore_errors: true #ignore if container is not running
    win_shell: docker stop $(docker ps -a -q)
    
    
#Compose All and Assert

#Portal Internal
  - name: Compose Portal Internal
    win_shell: cd C:\Docker\All | docker-compose -f docker-compose.portal.internal.yml --env-file=portal.internal.env up -d
      
  - name: New Portal Internal Composed
    win_shell: docker ps -f "name=portal-internal" -f status=running -f health=starting
    register: portal_internal_result

  - assert:
          that:
            - "'portal-internal' in portal_internal_result.stdout"
#Portal External
  - name: Compose Portal External
    win_shell: cd C:\Docker\All | docker-compose -f docker-compose.portal.external.yml --env-file=portal.external.env up -d

  - name: New Portal External Composed
    win_shell: docker ps -f "name=portal-external" -f status=running -f health=starting
    register: portal_external_result

  - assert:
      that:
        - "'portal-external' in portal_external_result.stdout"
#Heler Service
  - name: Compose Helper Services
    win_shell: cd C:\Docker\All | docker-compose -f docker-compose.helper.services.yml --env-file=helper.services.env up -d

  - name: New Helper Service Composed
    win_shell: docker ps -f "name=helper-services" -f status=running -f health=starting
    register: helper_srv_result

  - assert:
      that:
        - "'helper-service' in helper_srv_result.stdout"
#Conversion Service
  - name: Compose Conversion Services
    win_shell: cd C:\Docker\All | docker-compose -f docker-compose.conversion.services.yml --env-file=conversion.services.env up -d

  - name: New Conversion Services Composed
    win_shell: docker ps -f "name=conversion-services" -f status=running -f health=starting
    register: conversion_srv_result

  - assert:
      that:
        - "'conversion-services' in conversion_srv_result.stdout"
#Burning Service
  - name: Compose Burning Service
    win_shell: cd C:\Docker\All | docker-compose -f docker-compose.burning.service.yml --env-file=burning.service.env up -d

  - name: New Burning Service Composed
    win_shell: docker ps -f "name=burning-service" -f status=running -f health=starting
    register: burning_srv_result

  - assert:
      that:
        - "'burning-service' in burning_srv_result.stdout"
#Publishing Service
  - name: Compose Publishing Service
    win_shell: cd C:\Docker\All | docker-compose -f docker-compose.publishing.service.yml --env-file=publishing.service.env up -d

  - name: New Publishing Service Composed
    win_shell: docker ps -f "name=publishing-service" -f status=running -f health=starting
    register: publishing_srv_result

  - assert:
      that:
        - "'publishing-service' in publishing_srv_result.stdout"
#Integrator Service
  - name: Compose Integrator Service
    win_shell: cd C:\Docker\All | docker-compose -f docker-compose.integrator.service.yml --env-file=integrator.service.env up -d

  - name: New Integrator Service Composed
    win_shell: docker ps -f "name=integrator-service" -f status=running -f health=starting
    register: integrator_srv_result

  - assert:
      that:
        - "'integrator-service' in integrator_srv_result.stdout"
#Media Service
  - name: Compose Media Service
    win_shell: cd C:\Docker\All | docker-compose -f docker-compose.media.service.yml --env-file=media.service.env up -d

  - name: New Media Service Composed
    win_shell: docker ps -f "name=media-service" -f status=running -f health=starting
    register: media_srv_result

  - assert:
      that:
        - "'media-service' in media_srv_result.stdout"

#RaaS
  - name: Compose new RaaS
    win_shell: cd C:\Docker\All | docker-compose -f docker-compose.raas.yml --env-file=raas.env up -d

  - name: New Container Composed
    win_shell: docker ps -f "name=raas" -f status=running -f health=starting
    register: result
    
  - assert:
        that:
          - "'raas' in result.stdout"
        
#System Prune
  - name: System Prune
    win_shell: docker system prune -f


